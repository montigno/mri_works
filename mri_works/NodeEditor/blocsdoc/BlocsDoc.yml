AbsX:
  functionality: "Generate an abscissa list from xmin to xmax in steps of delta_x.
                  Example (xmin=0.0, xmax=10.0, delta_x=0.1) --> [0.0, 0.1, ...., 9.9, 10.0]"
  xmin : (float) minimum value
  xmax : (float) maximal value
  delta_x: (float) deviation of x
  outAbscissa: (list of float) list of abscissa of x
  dependencies: Numpy
  
afni_Fourier:
  functionality: Wraps command 3dFourier. Program to lowpass and/or highpass each voxel time series in a dataset, via the FFT
  highpass: (a float) highpass. flag -highpass %f, position 1.
  in_file: (an existing file name) input file to 3dFourier. flag %s, position -1.
  lowpass: (a float) lowpass. flag -lowpass %f, position 0
  out_file: (an existing file name) output file
  dependencies: Nipype, AFNI
  link_web: https://nipype.readthedocs.io/en/0.12.1/interfaces/generated/nipype.interfaces.afni.preprocess.html#fourier

afni_Seg:
  functionality: "3dSeg segments brain volumes into tissue classes. The program allows
                  for adding a variety of global and voxelwise priors. However for the moment, only mixing fractions and MRF are documented.
                  For complete details, see the `3dSeg Documentation (https://afni.nimh.nih.gov/pub/dist/doc/program_help/3dSeg.html>)"
  in_file: (an existing file name). ANAT is the volume to segment. argument ``-anat %s``, position -1
  mask: ('AUTO' or an existing file name). only non-zero voxels in mask are analyzed. mask can either be a dataset or the string "AUTO" which would use AFNI's automask function to create the mask. argument ``-mask %s``, position -2.
  dependencies: Nipype, AFNI
  link_web: https://nipype.readthedocs.io/en/0.12.1/interfaces/generated/nipype.interfaces.afni.preprocess.html#seg
  
afni_SkullStrip:
  functionality: "Wraps command 3dSkullStrip.
                  A program to extract the brain from surrounding tissue from MRI T1-weighted images
                  For complete details, see the 3dSkullStrip Documentation."
  in_file: (an existing file name). input file to 3dSkullStrip. flag -input %s, position 1
  dependencies: Nipype, AFNI
  link_web: https://nipype.readthedocs.io/en/0.12.1/interfaces/generated/nipype.interfaces.afni.preprocess.html#skullstrip
  
ants_atropos:
  functionality: "A finite mixture modeling (FMM) segmentation approach with possibilities 
                 for specifying prior constraints.
                 These prior constraints include the specification of a prior label image, 
                 prior probability images (one for each class), 
                 and/or an MRF prior to enforce spatial smoothing of the labels. 
                 Similar algorithms include FAST and SPM. 
                 atropos can also perform multivariate segmentation if you pass a list of images in e.g. a=(img1,img2)."
  ants_image: (ANTsImage or list/tuple of ANTsImage python:types) – One or more scalar images to segment. If priors are not used, the intensities of the first image are used to order the classes in the segmentation output, from lowest to highest intensity. Otherwise the order of the classes is dictated by the order of the prior images.
  mask_ants: (ANTsImage) – mask image.
  dependencies: ANTsPy

ants_BrainExtraction:
  functionality: Wraps command antsBrainExtraction.sh
  anatomical_image: "(an existing file name)
                     Structural image, typically T1. If more than oneanatomical image is
                     specified, subsequently specifiedimages are used during the
                     segmentation process. However,only the first image is used in the
                     registration of priors.Our suggestion would be to specify the T1 as
                     the first image.Anatomical template created using e.g. LPBA40 data
                     set withbuildtemplateparallel.sh in ANTs.
                     flag: -a %s"
  brain_probability_mask: "(an existing file name)
                           Brain probability mask created using e.g. LPBA40 data set whichhave
                           brain masks defined, and warped to anatomical template andaveraged
                           resulting in a probability image.
                           flag: -m %s"
  brain_template: "(an existing file name)
                   Anatomical template created using e.g. LPBA40 data set
                   withbuildtemplateparallel.sh in ANTs.
                   flag: -e %s"
  BrainExtractionBrain: (an existing file name) brain extraction image
  BrainExtractionMask: (an existing file name) brain extraction mask
  dependencies: Nipype, ANTs
  link_web: https://nipype.readthedocs.io/en/0.12.0/interfaces/generated/nipype.interfaces.ants.segmentation.html#brainextraction
  
ants_image_read:
  functionality: Read an ANTsImage from file
  filename: (string) – Name of the file to read the image from.
  ants_image: return ANTsImage
  dependencies: ANTsPy
  link_web: https://antspy.readthedocs.io/en/latest/core.html

ants_image_write:
  functionality: Write an ANTsImage to file
  image: (ANTsImage) – image to save to file
  filename: (string) – name of file to which image will be saved
  outfile_image: file in which the image is saved
  dependencies: ANTsPy
  link_web: https://antspy.readthedocs.io/en/latest/core.html

ants_JointFusion:
  functionality: Wraps command antsJointFusion
  atlas_image: "(a list of items which are a list of items which are an
                existing file name)
                The atlas image (or multimodal atlas images) assumed to be aligned
                to a common image domain.
                flag: -g %s..."
  atlas_segmentation_image: "(a list of items which are an existing file
                             name)
                             The atlas segmentation images. For performing label fusion the
                             number of specified segmentations should be identical to the number
                             of atlas image sets.
                             flag: -l %s..."
  target_image: "(a list of items which are a list of items which are an
                 existing file name)
                 The target image (or multimodal target images) assumed to be aligned
                 to a common image domain.
                 flag: -t %s"
  out_atlas_voting_weight_name_format: (a string)
  out_intensity_fusion_name_format: (a string)
  out_label_fusion: (an existing file name)
  out_label_post_prob_name_format: (a string)
  dependencies: Nipype, ANTs
  link_web: https://nipype.readthedocs.io/en/0.12.0/interfaces/generated/nipype.interfaces.ants.segmentation.html#antsjointfusion

ants_MeasureImageSimilarity:
  functionality: Wrapped executable MeasureImageSimilarity.
  fixed_image: (a pathlike object or string representing an existing file) – Image to which the moving image is warped.
  metric: (‘CC’ or ‘MI’ or ‘Mattes’ or ‘MeanSquares’ or ‘Demons’ or ‘GC’) – Maps to a command-line argument %s.
  moving_image: (a pathlike object or string representing an existing file) – Image to apply transformation to (generally a coregistered functional).
  radius_or_number_of_bins: (an integer) – The number of bins in each stage for the MI and Mattes metric, or the radius for other metrics. Requires inputs metric.
  sampling_percentage: (0.0 ≤ a floating point number ≤ 1.0) – Percentage of points accessible to the sampling strategy over which to optimize the metric. Requires inputs metric.
  dependencies: Nipype, ANTs
  link_web: https://nipype.readthedocs.io/en/latest/api/generated/nipype.interfaces.ants.registration.html#measureimagesimilarity

ants_N4BiasFieldCorrection:
  functionality: "N4 is a variant of the popular N3 (nonparameteric nonuniform normalization) retrospective bias correction algorithm.
                  Based on the assumption that the corruption of the low frequency bias field can be modeled as a convolution of the intensity histogram by a Gaussian,
                  the basic algorithmic protocol is to iterate between deconvolving the intensity histogram by a Gaussian,
                  remapping the intensities, and then spatially smoothing this result by a B-spline modeling of the bias field itself.
                  The modifications from and improvements obtained over the original N3 algorithm are described in [Tustison2010]."
  input_image: "(a file name)
                image to apply transformation to (generally a coregistered
                functional)
                flag: --input-image %s"
  bias_image: (an existing file name) Estimated bias
  output_image: (an existing file name) Warped image
  dependencies: Nipype, ANTs
  link_web: https://nipype.readthedocs.io/en/0.12.0/interfaces/generated/nipype.interfaces.ants.segmentation.html#n4biasfieldcorrection

ants_Registration:
  functionality: ANTs Registration command for registration of images.
  fixed_image: (a list of items which are an existing file name). Image to which the moving_image should be transformed(usually a structural image).
  moving_image: (a list of items which are an existing file name). Image that will be registered to the space of fixed_image. This is the image on which the transformations will be applied to
  metric: (a list of items which are 'CC' or 'MeanSquares' or 'Demons' or 'GC' or 'MI' or 'Mattes' or a list of items which are 'CC' or 'MeanSquares' or 'Demons' or 'GC' or 'MI' or 'Mattes'). the metric(s) to use for each stage. Note that multiple metrics per stage are not supported in ANTS 1.9.1 and earlier.
  metric_weight: (a list of items which are a float or a list of items which are a float, nipype default value [1.0]). the metric weight(s) for each stage. The weights must sum to 1 per stage. requires metric.
  shrink_factors: (a list of items which are a list of items which are an integer (int or long))
  smoothing_sigmas: (a list of items which are a list of items which are a float).
  transforms: (a list of items which are 'Rigid' or 'Affine' or 'CompositeAffine' or 'Similarity' or 'Translation' or 'BSpline' or 'GaussianDisplacementField' or 'TimeVaryingVelocityField' or 'TimeVaryingBSplineVelocityField' or 'SyN' or 'BSplineSyN' or 'Exponential' or 'BSplineExponential'). argument ``%s``.
  dependencies: Nipype, ANTs
  link_web: https://nipype.readthedocs.io/en/latest/api/generated/nipype.interfaces.ants.registration.html#registration
  
ants_set_spacing:
  functionality: Set image spacing
  ants_image: AntsImage to read
  new_spacing: (tuple or list) – updated spacing for the image. should have one value for each dimension
  ants_image_spacing: return ANTsImage with spacing
  dependencies: ANTsPy
  link_web: https://antspy.readthedocs.io/en/latest/core.html

Array_3D_random:
  functionality: Generate a random image 3D (row, column and slice)
  row: (integer) number of row
  col: (integer) number of column
  slice: (integer) number of slice
  rand_out: (array of float) image 3D
  dependencies: Numpy

Array_4D_random:
  functionality: Generate a random image 4D (row, column, slice and temporel)
  row: (integer) number of row
  col: (integer) number of column
  slice: (integer) number of slice
  temporal: (integer) number of temporal stack
  rand_out: (array of float) image 4D
  dependencies: Numpy

Array_5D_random:
  functionality: Generate a random image 5D (row, column, slice, temporal and canal)
  row: (integer) number of row
  col: (integer) number of column
  slice: (integer) number of slice
  temporal: (integer) number of temporal stack
  canal:  (integer) number of canal
  rand_out: (array of float) image 5D
  dependencies: Numpy

Choose_directory:
  functionality: Open a dialog box from which the user can select a directory.
  RepDefault: (path) default directory
  title: (string) dialog box title
  filePath: (path) path of the selected directory

Choose_file:
  functionality: Open a dialog box from which the user can select a file.
  fileDefault: (path) default file
  extension: (string) file name filtering (ex '*.jpg' '*.txt' '.nii .json ')
  title: (string) dialog box title
  filePath: (path) path of the selected file

csv_reader_file: 
  functionality: https://docs.python.org/3/library/csv.html
  file: (path) path of CSV file
  array_csv: (string array) string array contained in the CSV file

csv_reader_text:
  functionality: https://docs.python.org/3/library/csv.html
  txt: (string) text in CSV format
  array_csv: (string array) string array contained in the text
  
DisplayImage:
  functionality: visualize the Nifti image
  image: (array of float)
  title: (string) title of the window
  dependencies: Numpy, Scipy
 
exponential:
  functionality: Generates a MRI exponential function (T1, T2 or TI) with or without shift.
  amplitude: (float) amplitude (a) of function
  decay: (float) decay (b) of function (in ms)
  shift: (float) shift (c) of function
  function: "(enumerate) list of possible function :
               'a*exp(-bx)', 'a*exp(-bx)+c',
               'a*(1-exp(-bx))', 'a*(1-exp(-bx))+c',
               'a*(1-2*exp(-bx))', 'a*(1-2*c*exp(-bx))')"
  x: (list of float) abscissa x
  outFunction: (list of float) out of function selected
  dependencies: Numpy

fact:
  functionality: return x factorial as integer
  enter_int: (integer) an integer number
  factorial: (integer) factorial of enter_int
  dependencies: Numpy

fetch_atlas_harvard_oxford:
  functionality:
  atlas_name: "(string) Name of atlas to load. Can be: cort-maxprob-thr0-1mm, cort-maxprob-thr0-2mm, cort-maxprob-thr25-1mm,
               cort-maxprob-thr25-2mm, cort-maxprob-thr50-1mm, cort-maxprob-thr50-2mm, sub-maxprob-thr0-1mm, sub-maxprob-thr0-2mm,
               sub-maxprob-thr25-1mm, sub-maxprob-thr25-2mm, sub-maxprob-thr50-1mm, sub-maxprob-thr50-2mm, cort-prob-1mm,
               cort-prob-2mm, sub-prob-1mm, sub-prob-2mm"
  dependencies: Nipype, Nilearn
  link_web: https://nilearn.github.io/modules/generated/nilearn.datasets.fetch_atlas_harvard_oxford.html

fetch_atlas_msdl:
  functionality: 
  dependencies: Nipype, Nilearn
  
  link_web: https://nilearn.github.io/modules/generated/nilearn.datasets.fetch_atlas_msdl.html

fetch_atlas_smith_2009:
  functionality: 
  link_web: https://nilearn.github.io/modules/generated/nilearn.datasets.fetch_atlas_smith_2009.html
  dependencies: Nipype, Nilearn

fetch_neurovault_motor_task:
  functionality: 
  link_web: https://nilearn.github.io/modules/generated/nilearn.datasets.fetch_neurovault_motor_task.html
  dependencies: Nipype, Nilearn

FloatToInt_array:
  functionality: "Allows the conversion of a float array to an integer array.
                   Example  [[0.1] , [1.1] , [2.2]] --> [[0] , [1] , [2]]"
  arrayFloat : (array of float) array of floating values
  outArrayInt: (array of integer) array of integer values

FloatToInt_list:
  functionality: "Allows the conversion of a float list to an integer list.
                   Example  [0.1 , 1.1 , 2.2 ] --> [0 , 1 , 2]"
  listFloat : (list of float) list of floating values
  outListInt: (list of integer) list of integer values

FloatToInt_simple:
  functionality: "Allows the conversion of a float number to an integer number.
                   Example  1.1 --> 1"
  inFloat: (float) float number
  outInt: (integer) integer number

FloatToString:
  functionality: "Allows the conversion of a floating number to string.
                  Example 1.1 --> '1.1'"
  inFloat: (float) float number
  outString: (string) string of float number

fsl_ApplyMask:
  functionality: Use fslmaths to apply a binary mask to another image.
  in_file: "(an existing file name)
            image to operate on
            flag: %s, position: 2"
  mask_file: "(an existing file name)
              binary image defining mask space
              flag: -mas %s, position: 4"
  dependencies: Nipype, fsl
  link_web: https://nipype.readthedocs.io/en/0.12.0/interfaces/generated/nipype.interfaces.fsl.maths.html#applymask

fsl_BET:
  functionality: Bases FSLCommand. Wrapped executable bet. FSL BET wrapper for skull stripping
  in_file: (a pathlike object or string representing an existing file) – Input file to skull strip. Maps to a command-line argument %s (position 0).
  out_file: (a pathlike object or string representing a file) – Path/name of skullstripped file (if generated).
  mask_file: (a pathlike object or string representing a file) – Path/name of binary brain mask (if generated).
  outline_file: (a pathlike object or string representing a file) – Path/name of outline file (if generated).
  meshfile: (a pathlike object or string representing a file) – Path/name of vtk mesh file (if generated).
  inskull_mask_file: (a pathlike object or string representing a file) – Path/name of inskull mask (if generated).
  inskull_mesh_file: (a pathlike object or string representing a file) – Path/name of inskull mesh outline (if generated).
  outskin_mask_file: (a pathlike object or string representing a file) – Path/name of outskin mask (if generated).
  outskin_mesh_file: (a pathlike object or string representing a file) – Path/name of outskin mesh outline (if generated).
  outskull_mask_file: (a pathlike object or string representing a file) – Path/name of outskull mask (if generated).
  outskull_mesh_file: (a pathlike object or string representing a file) – Path/name of outskull mesh outline (if generated).
  skull_file: (a pathlike object or string representing a file) – Path/name of skull file (if generated).
  skull_mask_file: (a pathlike object or string representing a file) – Path/name of skull mask (if generated).
  dependencies: Nipype, fsl
  link_web: https://nipype.readthedocs.io/en/latest/api/generated/nipype.interfaces.fsl.preprocess.html#bet

fsl_BinaryMaths:
  functionality: Wraps command fslmaths Use fslmaths to perform mathematical operations using a second image or a numeric value.
  in_file: (an existing file name) image to operate on. flag %s, position 2
  operand_file: (an existing file name) second image to perform operation with. flag %s, position 5. mutually_exclusive operand_value
  operand_value: (a float) value to perform operation with. flag %.8f, position 5. mutually_exclusive operand_file
  operation: ('add' or 'sub' or 'mul' or 'div' or 'rem' or 'max' or 'min') operation to perform. flag -%s, position 4. 
  out_file: (an existing file name) image written after calculations
  dependencies: Nipype, fsl
  link_web: https://nipype.readthedocs.io/en/0.12.0/interfaces/generated/nipype.interfaces.fsl.maths.html#binarymaths

fsl_FAST:
  functionality: Bases FSLCommand. Wrapped executable fast. FSL FAST wrapper for segmentation and bias correction
  in_files: "(a list of items which are a pathlike object or string representing an existing file)
             Image, or multi-channel set of images, to be segmented. Maps to a command-line argument: %s (position: -1)."
  bias_field: (a list of items which are a pathlike object or string representing a file)
  mixeltype: (a pathlike object or string representing a file) – Path/name of mixeltype volume file _mixeltype.
  partial_volume_files: (a list of items which are a pathlike object or string representing a file)
  partial_volume_map: (a pathlike object or string representing a file) – Path/name of partial volume file _pveseg.
  probability_maps: (a list of items which are a pathlike object or string representing a file)
  restored_image: (a list of items which are a pathlike object or string representing a file)
  tissue_class_files: (a list of items which are a pathlike object or string representing a file)
  tissue_class_map: (a pathlike object or string representing an existing file) – Path/name of binary segmented volume file one val for each class _seg.
  dependencies: Nipype, fsl
  link_web: https://nipype.readthedocs.io/en/latest/api/generated/nipype.interfaces.fsl.preprocess.html#fast

fsl_FLIRT:
  functionality: Bases FSLCommand. Wrapped executable flirt. FSL FLIRT wrapper for coregistration
  in_file: (a pathlike object or string representing an existing file) – Input file. Maps to a command-line argument -in %s (position 0).
  reference: (a pathlike object or string representing an existing file) – Reference file. Maps to a command-line argument -ref %s (position 1).
  out_file: (a pathlike object or string representing an existing file) – Path/name of registered file (if generated).
  out_log: (a pathlike object or string representing a file) – Path/name of output log (if generated).
  out_matrix_file: (a pathlike object or string representing an existing file) – Path/name of calculated affine transform (if generated).
  dependencies: Nipype, fsl
  link_web: https://nipype.readthedocs.io/en/latest/api/generated/nipype.interfaces.fsl.preprocess.html#flirt

fsl_FNIRT:
  functionality: Bases FSLCommand. Wrapped executable fnirt. FSL FNIRT wrapper for non-linear registration
  in_file: (a pathlike object or string representing an existing file) – Name of input image. Maps to a command-line argument --in=%s.
  ref_file: (a pathlike object or string representing an existing file) – Name of reference image. Maps to a command-line argument --ref=%s.
  field_file: (a pathlike object or string representing a file) – File with warp field.
  fieldcoeff_file: (a pathlike object or string representing an existing file) – File with field coefficients.
  jacobian_file: (a pathlike object or string representing a file) – File containing Jacobian of the field.
  log_file: (a pathlike object or string representing a file) – Name of log-file.
  modulatedref_file: (a pathlike object or string representing a file) – File containing intensity modulated –ref.
  out_intensitymap_file: (a list of from 2 to 2 items which are a pathlike object or string representing a file) – Files containing info pertaining to intensity mapping.
  warped_file: (a pathlike object or string representing an existing file) – Warped image.
  dependencies: Nipype, fsl
  link_web: https://nipype.readthedocs.io/en/latest/api/generated/nipype.interfaces.fsl.preprocess.html#fnirt

fsl_Merge:
  functionality: "Bases: FSLCommand. Wrapped executable fslmerge. Use fslmerge to concatenate images
                  Images can be concatenated across time, x, y, or z dimensions.
                  Across the time (t) dimension the TR is set by default to 1 sec.
                  Note to set the TR to a different value, specify ‘t’ for dimension and specify the TR value in seconds for the tr input.
                  The dimension will be automatically updated to ‘tr’."
  dimension: (‘t’ or ‘x’ or ‘y’ or ‘z’ or ‘a’) – Dimension along which to merge, optionally set tr input when dimension is t. Maps to a command-line argument -%s (position 0).
  in_files: (a list of items which are a pathlike object or string representing an existing file) – Maps to a command-line argument %s (position 2).
  merged_file: (a pathlike object or string representing an existing file)
  dependencies: Nipype, fsl
  link_web: https://nipype.readthedocs.io/en/latest/api/generated/nipype.interfaces.fsl.utils.html#merge

fsl_Split:
  functionality: s
  dependencies: Nipype, fsl
  link_web: https://nipype.readthedocs.io/en/latest/api/generated/nipype.interfaces.fsl.utils.html

fsl_SwapDimensions:
  functionality: s
  dependencies: Nipype, fsl
  link_web: https://nipype.readthedocs.io/en/latest/api/generated/nipype.interfaces.fsl.utils.html

fsl_Threshold:
  functionality: s
  dependencies: Nipype, fsl
  link_web: https://nipype.readthedocs.io/en/0.12.0/interfaces/generated/nipype.interfaces.fsl.maths.html

fsl_UnaryMaths:
  functionality: s
  dependencies: Nipype, fsl
  link_web: https://nipype.readthedocs.io/en/0.12.0/interfaces/generated/nipype.interfaces.fsl.maths.html

IntToFloat_array:
  functionality: "Allows the conversion of an integer array to a floating array.
                  Example [[0] , [1] , [2]] --> [[0.0] , [1.0] , [2.0]]"
  arrayInt: (array of integer) array of integer values
  outArrayFloat: (array of float) array of floating values

IntToFloat_list:
  functionality: "Allows the conversion of an integer list to a float list.
                  Example [0 , 1 , 2] --> [0.0 , 1.0 , 2.0]"
  listInt: (list of integer) list of integer values
  outListFloat: (list of float) list of floating values

IntToFloat_simple:
  functionality: "Allows the conversion of an integer number to a float number.
                  Example 2 --> 2.0"
  inInt: (integer) list of integer values
  outFloat: (float) list of floating values

IntToString:
  functionality: "Allows the conversion of a integer number to string.
                  Example 1 --> '1'"
  inInt: (integer) integer number
  outString: (string) string of integer number

ListOfInt:
  functionality: Create a list of integer number 0 to n-1.
  n: (integer) an integer number
  serie_int: (list of integer) a list of integer number 0 to n-1

MP3_T2map:
  functionality: Create a T2 map from a multi-echo time data.
  mat_eng: (str) functions of a called MATLAB (used with 'start_matlab' brick)
  file_in: (path) path of your Nifti file (with JSON)
  file_out: (path) recording Nifti file path (a JSON file with the same name will also be created)
  dependencies: Matlab engine
  
mrtrix3_DWIExtract:
  functionality: https://nipype.readthedocs.io/en/1.1.8/interfaces/generated/interfaces.mrtrix3/utils.html#dwiextract
  dependencies: Nipype, MRtrix3

nipy_FmriRealign4d:
  functionality: Simultaneous motion and slice timing correction algorithm. This interface wraps nipy’s FmriRealign4d algorithm.
  in_file: (a list of items which are an existing file name) File to realign
  tr: (a float) TR in seconds
  out_file: (a list of items which are an existing file name) Realigned files
  par_file: (a list of items which are an existing file name) Motion parameter files
  dependencies: Nipype
  link_web: https://nipype.readthedocs.io/en/0.12.1/interfaces/generated/nipype.interfaces.nipy.preprocess.html#fmrirealign4d

NlargestInArray:
  functionality: Check the n largest value in array input.
  in_array: (array of float) array input
  n: (integer) number of desired largest values
  listMax: (list of float) list of n largest values of in_array

NsmallestInArray:
  functionality: Check the n smallest value in array input.
  in_array: (array of float) array input
  n: (integer) number of desired smallest values
  listMin: (list of float) list of n smallest values of in_array

numpy_abs:
  functionality: Returns the absolute value of the array elements.
  y: (array of float) array input
  abs: (array of float) absolute of y

numpy_exponential:
  functionality: Returns the exponential of the array elements.
  y: (array of float) array input
  exp: (array of float) exponential of y

numpy_RMS:
  functionality: Returns the Root Mean Square of the array elements.
  y: (array of float) array input
  rms: (array of float) rms of y

numpy_std:
  functionality: Returns the standard deviation of the array elements.
  y: (array of float) array input
  std: (array of float) standard deviation of y

Plot_anat:
  functionality: https://nilearn.github.io/modules/generated/nilearn.plotting.plot_anat.html
  dependencies: Nilearn

Plot_epi:
  functionality: https://nilearn.github.io/modules/generated/nilearn.plotting.plot_epi.html
  dependencies: Nilearn

Plot_glass_brain:
  functionality: https://nilearn.github.io/modules/generated/nilearn.plotting.plot_glass_brain.html
  dependencies: Nilearn

Plot_img:
  functionality: https://nilearn.github.io/modules/generated/nilearn.plotting.plot_img.html
  dependencies: Nilearn

Plot_prob_atlas:
  functionality: https://nilearn.github.io/modules/generated/nilearn.plotting.plot_prob_atlas.html

Plot_roi:
  functionality: https://nilearn.github.io/modules/generated/nilearn.plotting.plot_roi.html
  dependencies: Nilearn

Print_array_bool:
  functionality: Prints the boolean array to the terminal with a specified message from comment port.
  comment: (string) your comment
  in_array_Bool: (array of boolean value) array of boolean values

Print_array_float:
  functionality: Prints the array of floating numbers to the terminal with a specified message from comment port.
  comment: (string) your comment
  in_array_Float: (array of float) array of floating values

Print_array_int:
  functionality: Prints the array of integer numbers to the terminal with a specified message from comment port.
  comment: (string) your comment
  in_array_Int: (array of integer) array of integer numbers

Print_array_path:
  functionality: Prints the array of file/directory paths to the terminal with a specified message from comment port.
  comment: (string) your comment
  in_array_Path: (array of path) array of file/directory paths

Print_array_str:
  functionality: Prints the array of strings to the terminal with a specified message from comment port.
  comment: (string) your comment
  in_array_String: (array of string) array of strings

Print_bool:
  functionality: Prints the boolean value to the terminal with a specified message from comment port.
  comment: (string) your comment
  inBool: (boolean) boolean value

Print_dict:
  functionality: Prints the dictionary structure to the terminal with a specified message from comment port.
  comment: (string) your comment
  inBool: (dict) dictionary structure

Print_float:
  functionality: Prints the floating number to the terminal with a specified message from comment port.
  comment: (string) your comment
  inFloat: (float) float number

Print_int:
  functionality: Prints the integer number to the terminal with a specified message from comment port.
  comment: (string) your comment
  inInt: (integer) integer number

Print_list_bool:
  functionality: Prints the boolean list to the terminal with a specified message from comment port.
  comment: (string) your comment
  in_list_Bool: (list of boolean value) list of boolean values

Print_list_float:
  functionality: Prints the list of floating numbers to the terminal with a specified message from comment port.
  comment: (string) your comment
  in_list_Float: (list of float) list of floating values

Print_list_int:
  functionality: Prints the list of integer numbers to the terminal with a specified message from comment port.
  comment: (string) your comment
  in_list_Int: (list of integer) list of integer numbers

Print_list_path:
  functionality: Prints the list of file/directory paths to the terminal with a specified message from comment port.
  comment: (string) your comment
  in_list_Path: (list of path) list of file/directory paths

Print_list_str:
  functionality: Prints the list of strings to the terminal with a specified message from comment port.
  comment: (string) your comment
  in_list_String: (list of string) list of strings

Print_path:
  functionality: Prints file/directory path to the terminal with a specified message from comment port.
  comment: (string) your comment
  inPath: (path) file/directory paths

Print_str:
  functionality: Prints the string to the terminal with a specified message from comment port.
  comment: (string) your comment
  inString: (string) string

Print_tuple:
  functionality: Prints the tuple structure to the terminal with a specified message from comment port.
  comment: (string) your comment
  inString: (tuple) tuple

Print_type_var:
  functionality: Prints the type of variable to the terminal with a specified message from comment port.
  comment: (string) your comment
  inString: (all type) your variable whatever the type

pyPlot2:
  functionality: Provides a MATLAB-like plotting framework
  data: (array of float) array of scalar for y-coordinate
  x: (list of float) sequence of scalar for abscissa
  title: (str or None) the legend’s title
  dependencies: matplotlib

trigonometric:
  functionality: "Generate a trigonometric function (cos, sin, tan, arccos, arcsin, arctan). 
                     y = f(x+angle)"
  angle : (float) shift angle
  function : "(enumerate) list of possible function :
               'sin(x)', 'cos(x)', 'tan(x)',
               'arcsin(x)', 'arccos(x)', 'arctan(x)'"
  x_degree : (list of float) abscissa x in degree
  outFunction : (list of float) out of function selected
  dependencies: Numpy

x_Equal_y:
  functionality: Check if x == y
  x: (float) a float number
  y: (float) a float number
  out: (boolean) check condition (True or False)

x_GreaterOrEqual_y:
  functionality: Check if x >= y
  x: (float) a float number
  y: (float) a float number
  out: (boolean) check condition (True or False)

x_Greater_y:
  functionality: Check if x > y
  x: (float) a float number
  y: (float) a float number
  out: (boolean) check condition (True or False)

x_is_None:
  functionality: Check if x == None
  x: (float) a float number
  out: (boolean) check condition (True or False)

x_LessOrEqual_y:
  functionality: Check if x &lt;&#61; y
  x: (float) a float number
  y: (float) a float number
  out: (boolean) check condition (True or False)

x_Less_y:
  functionality: Check if x &lt; y
  x: (float) a float number
  y: (float) a float number
  out: (boolean) check condition (True or False)

x_Not_Equal_y:
  functionality: Check if x != y
  x: (float) a float number
  y: (float) a float number
  out: (boolean) check condition (True or False)
