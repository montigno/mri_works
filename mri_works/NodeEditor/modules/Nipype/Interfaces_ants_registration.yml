ants_MeasureImageSimilarity:
  args: '' # (a unicode string). Additional parameters to the command. argument: ``%s``.
  dimension: 2 # (2 or 3 or 4). Dimensionality of the fixed/moving image pair. argument: ``--dimensionality %d``, position: 1.
  environ: {} # (a dictionary with keys which are a bytes or None or a value of class 'str' and with values which are a bytes or None or a value of class 'str', nipype default value: {}). Environment variables.
  fixed_image_mask: 'path' # (an existing file name). mask used to limit metric sampling region of the fixed image. argument: ``%s``.
  metric_weight: 1.0 # (a float, nipype default value: 1.0). The "metricWeight" variable is not used. requires: metric.
  moving_image_mask: 'path' # (an existing file name). mask used to limit metric sampling region of the moving image. requires: fixed_image_mask.
  num_threads: 1 # (an integer (int or long), nipype default value: 1). Number of ITK threads to use.
  sampling_strategy: enumerate(('None', 'Regular', 'Random')) # sampling_strategy: ('None' or 'Regular' or 'Random', nipype default value: None). Manner of choosing point set over which to optimize the metric. Defaults to "None" (i.e. a dense sampling of one sample per voxel). requires: metric.
ants_Registration:
  args: '' # (a unicode string). Additional parameters to the command. argument: ``%s``.
  collapse_output_transforms: True # (a boolean, nipype default value: True). Collapse output transforms. Specifically, enabling this option combines all adjacent linear transforms and composes all adjacent displacement field transforms before writing the results to disk. argument ``--collapse-output-transforms %d``
  convergence_threshold: [1.e-8, 1.e-9] # (a list of at least 1 items which are a float, nipype default value: [1e-06]). requires: number_of_iterations.
  convergence_window_size: [10] # (a list of at least 1 items which are an integer (int or long), nipype default value: [10]). requires: convergence_threshold.
  dimension: 3 # (3 or 2, nipype default value: 3). image dimension (2 or 3). argument ``--dimensionality %d``.
  environ: {} # (a dictionary with keys which are a bytes or None or a value of class 'str' and with values which are a bytes or None or a value of class 'str', nipype default value: {}). Environment variables.
  fixed_image_mask: 'path' # (an existing file name). Mask used to limit metric sampling region of the fixed imagein all stages. argument: ``%s``. mutually_exclusive: fixed_image_masks.
  fixed_image_masks: ['path'] # (a list of items which are an existing file name or 'NULL'). Masks used to limit metric sampling region of the fixed image, defined per registration stage (Use "NULL" to omit a mask at a given stage), mutually_exclusive: fixed_image_mask.
  float: False # (a boolean). Use float instead of double for computations. argument ``--float %d``.
  initial_moving_transform: ['path'] # (a list of items which are an existing file name). A transform or a list of transforms that should be applied before the registration begins. Note that, when a list is given, the transformations are applied in reverse order. argument: ``%s``. mutually_exclusive: initial_moving_transform_com.
  initial_moving_transform_com: 0 # (0 or 1 or 2). Align the moving_image nad fixed_image befor registration using the geometric center of the images (=0), the image intensities (=1),or the origin of the images (=2). argument: ``%s``. mutually_exclusive: initial_moving_transform.
  initialize_transforms_per_stage: False # (a boolean, nipype default value: False). Initialize linear transforms from the previous stage. By enabling this option, the current linear stage transform is directly intialized from the previous stages linear transform; this allows multiple linear stages to be run where each stage directly updates the estimated linear transform from the previous stage. (e.g. Translation -> Rigid -> Affine). argument: ``--initialize-transforms-per-stage %d``.
  interpolation: enumerate(('Linear', 'NearestNeighbor', 'CosineWindowedSinc', 'WelchWindowedSinc', 'HammingWindowedSinc', 'LanczosWindowedSinc', 'BSpline', 'MultiLabel', 'Gaussian')) # ('Linear' or 'NearestNeighbor' or 'CosineWindowedSinc' or 'WelchWindowedSinc' or 'HammingWindowedSinc' or 'LanczosWindowedSinc' or 'BSpline' or 'MultiLabel' or 'Gaussian', nipype default value: Linear). argument: ``%s``.
  interpolation_parameters: (1.0, 1.0) # (a tuple of the form: (an integer (int or long)) or a tuple of the form: (a float, a float)).
  invert_initial_moving_transform: [False, False] # (a list of items which are a boolean). One boolean or a list of booleans that indicate whether the inverse(s) of the transform(s) definedin initial_moving_transform should be used. mutually_exclusive: initial_moving_transform_com. requires: initial_moving_transform.
  metric_item_trait: enumerate(('CC', 'MeanSquares', 'Demons', 'GC', 'MI', 'Mattes')) # ('CC' or 'MeanSquares' or 'Demons' or 'GC' or 'MI' or 'Mattes').
  metric_stage_trait: enumerate(('CC', 'MeanSquares', 'Demons', 'GC', 'MI', 'Mattes')) # ('CC' or 'MeanSquares' or 'Demons' or 'GC' or 'MI' or 'Mattes' or a list of items which are 'CC' or 'MeanSquares' or 'Demons' or 'GC' or 'MI' or 'Mattes').
  metric_weight_item_trait: 1.0 # (a float, nipype default value: 1.0).
  metric_weight_stage_trait: [0.0] # (a float or a list of items which are a float).
  moving_image_mask: 'path' # (an existing file name). mask used to limit metric sampling region of the moving imagein all stages. mutually_exclusive: moving_image_masks. requires: fixed_image_mask.
  moving_image_masks: ['path'] # (a list of items which are an existing file name or 'NULL'). Masks used to limit metric sampling region of the moving image, defined per registration stage(Use "NULL" to omit a mask at a given stage). mutually_exclusive: moving_image_mask.
  num_threads: 1 # (an integer (int or long), nipype default value: 1). Number of ITK threads to use
  number_of_iterations: [[1500, 200], [100, 50, 30]] # (a list of items which are a list of items which are an integer (int or long)).
  output_inverse_warped_image: 'path' # (a boolean or a file name). requires: output_warped_image.
  output_transform_prefix: '' # (a unicode string, nipype default value: transform). argument: ``%s``.
  output_warped_image: 'path' # (a boolean or a file name).
  radius_bins_item_trait: 5 # (an integer (int or long), nipype default value: 5).
  radius_bins_stage_trait: [0] # (an integer (int or long) or a list of items which are an integer (int or long)).
  radius_or_number_of_bins: [5] # (a list of items which are an integer (int or long) or a list of items which are an integer (int or long), nipype default value: [5]). the number of bins in each stage for the MI and Mattes metric, the radius for other metrics. requires: metric_weight.
  restore_state: 'path' # (an existing file name). Filename for restoring the internal restorable state of the registration. argument: ``--restore-state %s``.
  restrict_deformation: [[0,1]] # (a list of items which are a list of items which are 0 or 1). This option allows the user to restrict the optimization of the displacement field, translation, rigid or affine transform on a per-component basis. For example, if one wants to limit the deformation or rotation of 3-D volume to the first two dimensions, this is possible by specifying a weight vector of '1x1x0' for a deformation field or '1x1x0x1x1x0' for a rigid transformation. Low-dimensional restriction only works if there are no preceding transformations.
  sampling_percentage: [0.05, [0.05, 0.10]] # (a list of items which are 0.0 ⩽ a floating point number ⩽ 1.0 or None or a list of items which are 0.0 ⩽ a floating point number ⩽ 1.0 or None). the metric sampling percentage(s) to use for each stage. requires: sampling_strategy.
  sampling_percentage_item_trait: 0.0 # (0.0 ⩽ a floating point number ⩽ 1.0 or None).
  sampling_percentage_stage_trait: [0.0] # (0.0 ⩽ a floating point number ⩽ 1.0 or None or a list of items which are 0.0 ⩽ a floating point number ⩽ 1.0 or None).
  sampling_strategy: ['Random', None] # (a list of items which are 'None' or 'Regular' or 'Random' or None or a list of items which are 'None' or 'Regular' or 'Random' or None). the metric sampling strategy (strategies) for each stage. requires: metric_weight.
  sampling_strategy_item_trait: enumerate(('None', 'Regular', 'Random')) # ('None' or 'Regular' or 'Random' or None).
  sampling_strategy_stage_trait: enumerate(('None', 'Regular', 'Random')) # ('None' or 'Regular' or 'Random' or None or a list of items which are 'None' or 'Regular' or 'Random' or None). 
  save_state: 'path' # (a file name). Filename for saving the internal restorable state of the registration. argument: ``--save-state %s``.
  sigma_units: ['vox', 'mm'] # (a list of items which are 'mm' or 'vox'). units for smoothing sigmas. requires: smoothing_sigmas.
  transform_parameters: [(2.0, 0.0), (0.25, 3.0, 0.0)] # (a list of items which are a tuple of the form: (a float) or a tuple of the form: (a float, a float, a float) or a tuple of the form: (a float, an integer (int or long), an integer (int or long), an integer (int or long)) or a tuple of the form: (a float, an integer (int or long), a float, a float, a float, a float) or a tuple of the form: (a float, a float, a float, an integer (int or long)) or a tuple of the form: (a float, an integer (int or long), an integer (int or long), an integer (int or long), an integer (int or long))).
  use_estimate_learning_rate_once: [True, True] # (a list of items which are a boolean)
  use_histogram_matching: [True, True] # (a boolean or a list of items which are a boolean, nipype default value: True). Histogram match the images before registration.
  verbose: False # (a boolean, nipype default value: False). argument: ``-v``.
  winsorize_lower_quantile: 0.0 # (0.0 ⩽ a floating point number ⩽ 1.0, nipype default value: 0.0). The Lower quantile to clip image ranges. argument: ``%s``.
  winsorize_upper_quantile: 1.0 # (0.0 ⩽ a floating point number ⩽ 1.0, nipype default value: 1.0). The Upper quantile to clip image ranges. argument: ``%s``.
  write_composite_transform: False # (a boolean, nipype default value: False). argument: ``--write-composite-transform %d``.
 