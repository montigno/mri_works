spm_Coregister:
  apply_to_files: ['path'] # (a list of items which are an existing file name) files to apply transformation to
  cost_function: enumerate(('mi','nmi','ecc','ncc')) #  ('mi' or 'nmi' or 'ecc' or 'ncc') cost function, one of: 'mi' - Mutual Information, 'nmi' - Normalised Mutual Information, 'ecc' - Entropy Correlation Coefficient, 'ncc' - Normalised Cross Correlation
  fwhm: [0.0] # (a list of from 2 to 2 items which are a float) gaussian smoothing kernel width (mm)
  ignore_exception: False # (a boolean, nipype default value: False) Print an error message instead of throwing an exception in case the interface fails to run
  jobtype: enumerate(('estwrite','estimate','write')) # ('estwrite' or 'estimate' or 'write', nipype default value estwrite) one of: estimate, write, estwrite
  matlab_cmd: '' # (a string) matlab command to use
  mfile: True # (a boolean, nipype default value: True) Run m-code using m-file
  out_prefix: 'r' # (a string, nipype default value: r) coregistered output prefix
  paths: ['path'] # (a list of items which are a directory name) Paths to add to matlabpath
  separation: [0.0] # (a list of items which are a float) sampling separation in mm
  tolerance: [0.0] # (a list of items which are a float) acceptable tolerance for each of 12 params
  use_mcr: True # (a boolean) Run m-code using SPM MCR
  use_v8struct: True # (a boolean, nipype default value: True) Generate SPM8 and higher compatible jobs
  write_interp: 0 # (0 ≤ an integer ≤ 7) degree of b-spline used for interpolation
  write_mask: True # (a boolean) True/False mask output image
  write_wrap: [0,0,0] # (a list of from 3 to 3 items which are an integer (int or long)) Check if interpolation should wrap in [x,y,z]
spm_Normalize:
  DCT_period_cutoff: 0.0 # (a float) Cutoff of for DCT bases
  affine_regularization_type: enumerate(('mni','size','none')) # ('mni' or 'size' or 'none') mni, size, none
  apply_to_files: ['path'] # (a list of items which are an existing file name or a list of items which are an existing file name) files to apply transformation to
  ignore_exception: False # (a boolean, nipype default value: False) Print an error message instead of throwing an exception in case the interface fails to run
  jobtype: enumerate(('estwrite','est','write')) # ('estwrite' or 'est' or 'write', nipype default value estwrite) Estimate, Write or do both
  matlab_cmd: '' # (a string) matlab command to use
  mfile: True # (a boolean, nipype default value: True) Run m-code using m-file
  nonlinear_iterations: 0 # (an integer (int or long)) Number of iterations of nonlinear warping
  nonlinear_regularization: 0.0 # (a float) the amount of the regularization for the nonlinear part of the normalization
  out_prefix: '' # (a string, nipype default value: w) normalized output prefix
  paths: ['path'] # (a list of items which are a directory name) Paths to add to matlabpath
  source_image_smoothing: 0.0 # (a float) source smoothing
  source_weight: 'path' # (a file name) name of weighting image for source
  template_image_smoothing: 0.0 # (a float) template smoothing
  template_weight: 'path' # (a file name) name of weighting image for template
  use_mcr: True # (a boolean) Run m-code using SPM MCR
  use_v8struct: True # (a boolean, nipype default value: True) Generate SPM8 and higher compatible jobs
  write_bounding_box: [[0.0,0.0],[0.0,0.0],[0.0,0.0]] # (a list of from 2 to 2 items which are a list of from 3 to 3 items which are a float) 3x2-element list of lists
  write_interp: 0 # (0 ≤ an integer ≤ 7) degree of b-spline used for interpolation
  write_preserve: True # (a boolean) True/False warped images are modulated
  write_voxel_sizes: [[0.0,0.0,0.0],[0.0,0.0,0.0],[0.0,0.0,0.0]] # (a list of from 3 to 3 items which are a float) 3-element list
  write_wrap: [0] # (a list of items which are an integer (int or long)) Check if interpolation should wrap in [x,y,z]- list of bools
spm_NewSegment:
  affine_regularization: enumerate(('mni','eastern','subj','none')) # ('mni' or 'eastern' or 'subj' or 'none') mni, eastern, subj, none
  channel_info: (0.0,0.0,(True,True)) # (a tuple of the form: (a float, a float, a tuple of the form (a boolean, a boolean))) A tuple with the following fields - bias reguralisation (0-10) - FWHM of Gaussian smoothness of bias - which maps to save (Corrected, Field) - a tuple of two boolean values
  ignore_exception: False # (a boolean, nipype default value: False) Print an error message instead of throwing an exception in case the interface fails to run
  matlab_cmd: ''   # (a string) matlab command to use
  mfile: True # (a boolean, nipype default value: True) Run m-code using m-file
  paths: ['path'] # (a list of items which are a directory name) Paths to add to matlabpath
  sampling_distance: 0.0 # (a float) Sampling distance on data for parameter estimation
  tissues: ('path',) # (a list of items which are a tuple of the form: (a tuple of the form: (an existing file name, an integer (int or long)), an integer (int or long), a tuple of the form: (a boolean, a boolean), a tuple of the form: (a boolean, a boolean))) A list of tuples (one per tissue) with the following fields - tissue probability map (4D), 1-based index to frame - number of gaussians - which maps to save [Native, DARTEL] - a tuple of two boolean values - which maps to save [Unmodulated, Modulated] - a tuple of two boolean values
  use_mcr: True # (a boolean) Run m-code using SPM MCR
  use_v8struct: True # (a boolean, nipype default value: True) Generate SPM8 and higher compatible jobs
  warping_regularization: [0.0] # (a float) Aproximate distance between sampling points.
  mri_c  write_deformation_fields: [True,True] # (a list of from 2 to 2 items which are a boolean) Which deformation fields to write:[Inverse, Forward]
spm_Segment:
  affine_regularization: enumerate(('mni','eastern','subj','none',''))
  bias_fwhm: 0
  bias_regularization: 0.0
  clean_masks: enumerate(('no','light','thorough'))
  csf_output_type: [False,False,False]
  gaussians_per_class: [0.0]
  gm_output_type: [False,False,False]
  mask_image: 'path'
  matlab_cmd: ''
  mfile: True
  paths: 'path'
  sampling_distance: 0.0
  save_bias_corrected: False
  tissue_prob_maps: 'path'
  use_mcr: False
  use_v8struct: False
  warp_frequency_cutoff: 0.0
  warping_regularization: 0.0
  wm_output_type: [False,False,False]
spm_Realign:
  jobtype: enumerate(('estwrite','estimate','write'))
  quality: 0.0
  fwhm: 0.0
  separation: 0.0
  register_to_mean: False
  weight_img: 'path'
  interp: 0
  wrap: [0,0,0]
  write_which: [2,1]
  write_interp: 0
  write_wrap: [0,0,0]
  write_mask: False
  out_prefix: 'r'
  matlab_cmd: ''
  paths: ['path']
  mfile: True
  use_mcr: False
  use_v8struct: True
spm_SliceTiming:
  ignore_exception: False # (a boolean, nipype default value: False) Print an error message instead of throwing an exception in case the interface fails to run
  matlab_cmd: '' # (a string) matlab command to use mfile: (a boolean, nipype default value: True) Run m-code using m-file
  out_prefix: 'a' # (a string, nipype default value: a) slicetimed output prefix
  paths: ['path'] # (a list of items which are a directory name) Paths to add to matlabpath
  use_mcr: True # (a boolean) Run m-code using SPM MCR
  use_v8struct: True # (a boolean, nipype default value: True) Generate SPM8 and higher compatible jobs
spm_Smooth:
  fwhm: [0.0,0.0,0.0] # (a list of from 3 to 3 items which are a float or a float) 3-list of fwhm for each dimension
  data_type: 0 # (an integer (int or long)) Data type of the output images
  implicit_masking: False # (a boolean) A mask implied by a particularvoxel value
  ignore_exception: False # (a boolean, nipype default value: False) Print an error message instead of throwing an exception in case the interface fails to run
  out_prefix: 's' # (a string, nipype default value: s) smoothed output prefix
  matlab_cmd: '' # (a string) matlab command to use
  paths: ['path'] # (a list of items which are a directory name) Paths to add to matlabpath
  mfile: True # (a boolean, nipype default value: True) Run m-code using m-file
  use_mcr: False # (a boolean) Run m-code using SPM MCR
  use_v8struct: True # (a boolean, nipype default value: True) Generate SPM8 and higher compatible jobs
