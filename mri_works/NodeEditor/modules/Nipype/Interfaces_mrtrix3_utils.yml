mrtrix3_DWIExtract:
  bzero: True # (a boolean) extract b=0 volumes. argument ``-bzero``
  nobzero: True # (a boolean) extract non b=0 volumes. argument ``-no_bzero``
  singleshell: True # (a boolean) extract volumes with a specific shell. argument ``-singleshell``
  shell: [0.0] # (a list of items which are a float) specify one or more gradient shells. argument ``-shell %s``
  nthreads: 0 # (an integer (int or long)) number of threads. if zero, the number of available cpus will be used. argument ``-nthreads %d``
  grad_file: 'path' # (an existing file name) dw gradient scheme (MRTrix format). argument: ``-grad %s``
  grad_fsl: ('bvecs', 'bvals') # (a tuple of the form: (an existing file name, an existing file name)) (bvecs, bvals) dw gradient scheme (FSL format). argument ``-fslgrad %s %s``
  bval_scale: enumerate(('yes', 'no')) # ('yes' or 'no') specifies whether the b - values should be scaled by the square of the corresponding DW gradient norm, as often required for multishell or DSI DW acquisition schemes. The default action can also be set in the MRtrix config file, under the BValueScaling entry. Valid choices are yes / no, true / false, 0 / 1 (default: true). argument ``-bvalue_scaling %s``
  in_bvec: 'path' # (an existing file name) bvecs file in FSL format. argument ``-fslgrad %s %s``
  in_bval: 'path' # (an existing file name) bvals file in FSL format
  args: '' # (a unicode string) Additional parameters to the command. argument ``%s``
  environ: {} # (a dictionary with keys which are a bytes or None or a value of class 'str' and with values which are a bytes or None or a value of class 'str', nipype default value: {}). Environment variables
mrtrix3_MRConvert:
  coord: [0.0] # (a list of items which are a float) extract data at the specified coordinates. argument ``-coord %s``
  vox: [0.0] # (a list of items which are a float) change the voxel dimensions. argument ``-vox %s``
  axes: ([0] # a list of items which are an integer (int or long)) specify the axes that will be used. argument: ``-axes %s``
  scaling: [0.0] # (a list of items which are a float) specify the data scaling parameter. argument ``-scaling %s``
  nthreads: 0 # (an integer (int or long)) number of threads. if zero, the number of available cpus will be used.argument ``-nthreads %d``
  grad_file: 'path' # (an existing file name) dw gradient scheme (MRTrix format. argument ``-grad %s``
  grad_fsl: ('bvecs', 'bvals') # (a tuple of the form: (an existing file name, an existing file name)) (bvecs, bvals) dw gradient scheme (FSL format. argument ``-fslgrad %s %s``
  bval_scale: enumerate(('yes', 'no')) # ('yes' or 'no') specifies whether the b - values should be scaled by the square of the corresponding DW gradient norm, as often required for multishell or DSI DW acquisition schemes. The default action can also be set in the MRtrix config file, under the BValueScaling entry. Valid choices are yes / no, true / false, 0 / 1 (default true). argument ``-bvalue_scaling %s``
  in_bvec: 'path' # (an existing file name) bvecs file in FSL format. argument ``-fslgrad %s %s``
  in_bval: 'path' # (an existing file name) bvals file in FSL format
  args: '' # (a unicode string) Additional parameters to the command. argument ``%s``
  environ: {} # (a dictionary with keys which are a bytes or None or a value of class 'str' and with values which are a bytes or None or a value of class 'str', nipype default value: {}). Environment variables